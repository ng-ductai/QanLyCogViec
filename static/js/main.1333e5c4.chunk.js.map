{"version":3,"sources":["constants/ActionTypes.js","actions/index.js","components/TaskItem.js","components/TaskList.js","components/TaskForm.js","components/TaskSearchControl.js","components/TaskControl.js","App.js","reportWebVitals.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditing.js","reducers/filterTable.js","reducers/search.js","reducers/index.js","index.js"],"names":["LIST_ALL","SAVE_TASK","TOGGLE_FORM","CLOSE_FORM","OPEN_FORM","UPDATE_STATUS","DELETE_TASK","EDIT_TASK","FILTER_TABLE","SEARCH","closeForm","type","types","openForm","editTask","task","TaskItem","onUpdateStatus","props","id","onDeleteItem","onDeleteTask","onCloseForm","onEditTask","onOpenForm","className","this","status","onClick","index","name","showStatusElement","Component","connect","state","dispatch","actions","TaskList","onChange","event","target","value","checked","filter","filterName","filterStatus","onFilterTable","setState","tasks","filterTable","keyword","toLowerCase","indexOf","elmTasks","map","filerName","search","TaskForm","onHandleChange","onSave","preventDefault","onSaveTask","onClear","onExitForm","itemEditing","nextProps","isDisplayForm","onSubmit","TaskSearchControl","onSearch","placeholder","TaskControl","App","findIndex","result","forEach","onToggleForm","onClearTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","s4","Math","floor","random","randomID","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","push","setItem","stringify","splice","parseInt","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1333e5c4.chunk.js","sourcesContent":["export const LIST_ALL = 'LIST_ALL'\r\nexport const SAVE_TASK = 'ADD_TASK'\r\nexport const TOGGLE_FORM ='TOGGLE_FORM'\r\nexport const CLOSE_FORM ='CLOSE_FORM'\r\nexport const OPEN_FORM ='OPEN_FORM'\r\nexport const UPDATE_STATUS ='UPDATE_STATUS'\r\nexport const DELETE_TASK ='DELETE_TASK'\r\nexport const EDIT_TASK = 'EDIT_TASK'\r\nexport const FILTER_TABLE = 'FILTER_TABLE'\r\nexport const SEARCH = 'SEARCH'","import * as types from './../constants/ActionTypes'\r\n\r\nexport const listAll = () =>{\r\n    return{\r\n        type: types.LIST_ALL\r\n        \r\n    }\r\n}\r\n\r\nexport const saveTask = (task) => {\r\n    return {\r\n        type: types.SAVE_TASK,\r\n        task\r\n    }\r\n}\r\n\r\nexport const toggleForm = () => {\r\n    return {\r\n        type: types.TOGGLE_FORM        \r\n    }\r\n}\r\n\r\nexport const closeForm = () => {\r\n    return {\r\n        type: types.CLOSE_FORM        \r\n    }\r\n}\r\n\r\nexport const openForm = () => {\r\n    return {\r\n        type: types.OPEN_FORM       \r\n    }\r\n}\r\n\r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type: types.UPDATE_STATUS, id      \r\n    }\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type: types.DELETE_TASK, id      \r\n    }\r\n}\r\n\r\nexport const editTask = (task) => {\r\n    return {\r\n        type: types.EDIT_TASK, task     \r\n    }\r\n}\r\n\r\nexport const filterTask = (filter) => {\r\n    return {\r\n        type: types.FILTER_TABLE, \r\n        filter // filter: filter -> filterName, filterStatus\r\n    }\r\n}\r\n\r\n\r\nexport const searchTask = (keyword) => {\r\n    return {\r\n        type: types.SEARCH, \r\n        keyword \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.min.js';\r\n\r\nimport {connect} from 'react-redux'\r\nimport * as actions from './../actions/index'\r\n\r\nclass TaskItem extends Component {\r\n\r\n    showStatusElement(){\r\n        return (\r\n            <span\r\n                className={ this.props.task.status ? 'label-danger' : 'label-info' }\r\n                onClick={ this.onUpdateStatus }\r\n            >{ this.props.task.status === true ? 'Doing' : 'Done' }</span>\r\n        );\r\n    }\r\n\r\n    onUpdateStatus = () => {\r\n        this.props.onUpdateStatus(this.props.task.id)\r\n    }\r\n\r\n    onDeleteItem = () => {\r\n        this.props.onDeleteTask(this.props.task.id); //dispatch(actions.deleteItem)\r\n        this.props.onCloseForm()\r\n    }\r\n\r\n    onEditTask = () => {\r\n        this.props.onOpenForm();\r\n        this.props.onEditTask(this.props.task)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{ this.props.index }</td>\r\n                <td>{ this.props.task.name }</td>\r\n                <td className=\"text-center\">\r\n                    { this.showStatusElement() }\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button type=\"button\" className=\"btn btn-warning mr-10\" onClick={ this.onEditTask }>\r\n                        <span className=\"fa fa-pencil\"></span>\r\n                    </button>\r\n                    &nbsp;\r\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={ this.onDeleteItem }>\r\n                        <span className=\"fa fa-trash\"></span>\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return{\r\n        onUpdateStatus : (id) => {\r\n            dispatch(actions.updateStatus(id))\r\n        },\r\n        onDeleteTask : (id) => {\r\n            dispatch(actions.deleteTask(id))\r\n        },\r\n        onCloseForm : () => {\r\n            dispatch(actions.closeForm())\r\n        },\r\n        onOpenForm : () => {\r\n            dispatch(actions.openForm())\r\n        },\r\n        onEditTask: (task) => {\r\n            dispatch(actions.editTask(task))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (TaskItem);\r\n","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem';\r\nimport {connect} from 'react-redux'\r\n\r\nimport * as actions from './../actions/index'\r\n\r\nclass TaskList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filterName : '',\r\n            filterStatus : -1\r\n        };\r\n    }\r\n\r\n    onChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.type === 'checkbox' ? target.checked : target.value;\r\n        var filter ={\r\n            name: name === 'filterName' ? value : this.state.filterName ,\r\n            status: name === 'filterStatus' ? value : this.state.filterStatus\r\n        };\r\n        this.props.onFilterTable(filter)\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var { tasks, filterTable, keyword } = this.props;\r\n\r\n        if(filterTable.name){\r\n            tasks = tasks.filter((task) => {\r\n                return task.name.toLowerCase().indexOf(filterTable.name.toLowerCase()) !== -1\r\n            });\r\n        }\r\n       \r\n        tasks = tasks.filter((task) => {\r\n            if(filterTable.status  === -1){\r\n                return task;\r\n            }else{\r\n                return task.status === (filterTable.status === 1 ? true : false);\r\n            }\r\n        });            \r\n\r\n        tasks = tasks.filter((task) => {            \r\n            return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1\r\n            \r\n        });   \r\n\r\n        var elmTasks = tasks.map((task, index) => {\r\n            return (\r\n                <TaskItem\r\n                    key={task.id}\r\n                    task={task}\r\n                    index={index + 1}\r\n                />\r\n            )\r\n        });\r\n\r\n        return (       \r\n                <div className=\"row mt-15\">\r\n                    <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                        <table className=\"table table-bordered table-hover\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th className=\"text-center\">ID</th>\r\n                                    <th className=\"text-center\">Work name</th>\r\n                                    <th className=\"text-center\">Status</th>\r\n                                    <th className=\"text-center\">Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td></td>\r\n                                    <td>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"filterName\"\r\n                                            onChange={ this.onChange }\r\n                                            value={ this.state.filerName }\r\n                                        />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"filterStatus\"\r\n                                            onChange={ this.onChange }\r\n                                            value={ this.state.filterStatus }\r\n                                        >\r\n                                            <option value={-1}>All</option>\r\n                                            <option value={0}>Done</option>\r\n                                            <option value={1}>Doing</option>\r\n                                        </select>\r\n                                    </td>\r\n                                    <td></td>\r\n                                </tr>\r\n                                { elmTasks }\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>           \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,\r\n        filterTable: state.filterTable,\r\n        keyword: state.search\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onFilterTable: (filter) => {\r\n            dispatch(actions.filterTask(filter))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps ) (TaskList);\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nimport * as actions from './../actions/index'\r\n\r\nclass TaskForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            name: '',\r\n            status: true\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if(this.props.itemEditing && this.props.itemEditing.id !== null){\r\n            this.setState({\r\n                id : this.props.itemEditing.id,\r\n                name : this.props.itemEditing.name,\r\n                status : this.props.itemEditing.status\r\n            });\r\n        }else{\r\n            this.onClear();\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps && nextProps.itemEditing){\r\n            this.setState({\r\n                id : nextProps.itemEditing.id,\r\n                name : nextProps.itemEditing.name,\r\n                status : nextProps.itemEditing.status\r\n            });\r\n        }else{\r\n            this.onClear();\r\n        }\r\n    }\r\n\r\n    onHandleChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.type === 'checkbox' ? target.checked : target.value;\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    onSave = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSaveTask(this.state)\r\n        this.onClear();\r\n        this.onExitForm();\r\n    }\r\n\r\n    onClear = () => {\r\n        this.setState({            \r\n            name : '',\r\n            status : true\r\n        });\r\n    }\r\n\r\n    onExitForm = () => {\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.isDisplayForm) return null;\r\n        return (\r\n            \r\n            <div className=\"panel panel-warning\">\r\n                <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title text-center\">\r\n                        { !this.state.id ? 'Add work' : 'Update work' }\r\n                        <span\r\n                            className=\"fa fa-times text-right\"\r\n                            onClick={this.onExitForm}\r\n                        ></span>\r\n                    </h3>\r\n                </div>\r\n                <br />               \r\n                    \r\n                <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSave} >\r\n                        <div className=\"form-group\">\r\n                            <label>Work name:</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                name=\"name\"\r\n                                value={this.state.name}\r\n                                onChange={ this.onHandleChange }\r\n                            />\r\n                        </div>\r\n                        <br />\r\n                        <label>Status:</label>\r\n                        <select\r\n                            className=\"form-control\"\r\n                            value={this.state.status}\r\n                            onChange={this.onHandleChange}\r\n                            name=\"status\"\r\n                        >\r\n                            <option value={true}>Doing</option>\r\n                            <option value={false}>Done</option>\r\n                        </select>\r\n                        <br/>\r\n                        <div className=\"text-center\">\r\n                            <button type=\"submit\" className=\"btn btn-warning mr-10\">\r\n                                <span className=\"fa fa-plus mr-5\"></span>Save\r\n                            </button>\r\n                            <button type=\"button\" onClick={ this.onClear } className=\"btn btn-danger\">\r\n                                <span className=\"fa fa-undo mr-5\"></span>Reset\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isDisplayForm: state.isDisplayForm,\r\n        itemEditing: state.itemEditing\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSaveTask: (task) => {\r\n            dispatch(actions.saveTask(task))\r\n        },\r\n        onCloseForm : () => {\r\n            dispatch(actions.closeForm())\r\n        },\r\n       \r\n    }\r\n}\r\nexport default connect (mapStateToProps, mapDispatchToProps) (TaskForm);\r\n","import React, { Component } from 'react';\r\n\r\nimport {connect} from 'react-redux'\r\nimport * as actions from './../actions/index'\r\n\r\nclass TaskSearchControl extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            keyword : ''\r\n        }\r\n    }\r\n\r\n    onHandleChange = (event) => {\r\n        this.setState({\r\n            keyword : event.target.value\r\n        });\r\n    }\r\n\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-8\">\r\n                <div className=\"input-group\">\r\n                    <input\r\n                        name=\"keyword\"\r\n                        value={this.state.keyword}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Keyword...\"\r\n                        onChange={this.onHandleChange}\r\n                    />\r\n                    <span className=\"input-group-btn\">\r\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={this.onSearch}>\r\n                            <span className=\"fa fa-search mr-5\"></span>Search\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n       \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSearch: (keyword) => {\r\n            dispatch(actions.searchTask(keyword))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps ) (TaskSearchControl);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport TaskSearchControl from './TaskSearchControl';\r\n\r\nclass TaskControl extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <TaskSearchControl />                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskControl;\r\n","\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport React, { Component } from 'react';\nimport './App.css';\nimport TaskList from './components/TaskList';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport {connect} from 'react-redux'\nimport * as actions from './actions/index'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {                       \n            keyword : ''        \n        };\n    }\n    \n    findIndex = (id) => {\n        var { tasks } = this.state;\n        var result = -1;\n        tasks.forEach((task, index) => {\n            if(task.id === id){\n                result = index;\n            }\n        });\n        return result;\n    }\n   \n    onToggleForm = () => {\n        var {itemEditing} = this.props\n        if(itemEditing && itemEditing.id !== ''){\n            this.props.onOpenForm()\n        }\n        else{\n            this.props.onToggleForm()\n        }\n        this.props.onClearTask(\n            {\n                id: '',\n                name: '',\n                status: true\n            }\n        )\n    }\n\n    onSearch = (keyword) => {\n        this.setState({\n            keyword : keyword\n        });\n    }\n\n    render() {      \n\n        var {isDisplayForm} = this.props\n          \n        return (\n            <div className=\"container\">\n                <div className=\"text-center mb-30\">\n                    <h1>Work management</h1>\n                </div>\n                \n                <div className=\"row\">\n                    <div className={ isDisplayForm === true ? 'col-xs-12 col-sm-12 col-md-12 col-lg-4 mb-20' : '' }>\n                        <TaskForm /> \n                    </div>\n                    \n                    <div className={ isDisplayForm === true ? 'col-xs-12 col-sm-12 col-md-12 col-lg-8' : 'col-xs-122 col-sm1212 col-m12-12 col-lg-12' }>\n                        <div className=\"panel\">\n                            <div className=\"row\">\n                            \n                                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-5 text-center \">\n                                    <button type=\"button\" className=\"btn btn-primary mt-12\" onClick={this.onToggleForm} >\n                                        <span className=\"fa fa-plus mr-5 \"></span>Add work\n                                    </button>\n                                </div>\n                                \n                                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-7 text-center\">\n                                    <TaskControl onSearch={this.onSearch}  />\n                                </div>                         \n                            \n                            </div>                            \n                            \n                            <TaskList  />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm,\n        itemEditing: state.itemEditing\n    }\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return{\n        onToggleForm : () => {\n            dispatch(actions.toggleForm())\n        },\n        onClearTask: (task) => {\n            dispatch(actions.editTask(task))\n        },\n        onOpenForm : () => {\n            dispatch(actions.openForm())\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as types from './../constants/ActionTypes'\r\n\r\nconst s4 =() => {\r\n    return  Math.floor((Math.random()) * 1000)\r\n}\r\n\r\nconst randomID =() => {\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4();\r\n}\r\n\r\nconst findIndex = (tasks, id) => {\r\n    var result = -1;\r\n    tasks.forEach((task, index) => {\r\n        if(task.id === id){\r\n            result = index;\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nvar id ='', index = -1\r\n\r\nvar data = JSON.parse(localStorage.getItem('tasks'))\r\n\r\nvar initialState = data ? data :[]\r\n\r\nvar myReducer = (state=initialState, action) =>{\r\n    switch(action.type){\r\n        case types.LIST_ALL: \r\n            return state\r\n\r\n        case types.SAVE_TASK:\r\n            var task ={\r\n                id: action.task.id,\r\n                name: action.task.name,\r\n                status: (action.task.status === 'true' || action.task.status === true )\r\n                     ? true : false\r\n            }\r\n            if(!task.id){\r\n                task.id= randomID()\r\n                state.push(task)\r\n            }\r\n            else{\r\n               index = findIndex(state, task.id)\r\n               state[index] = task\r\n            }\r\n                        \r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state]\r\n\r\n        case types.UPDATE_STATUS: \r\n       \r\n            id = action.id\r\n            index = findIndex(state, id);\r\n            state[index] ={\r\n                ...state[index],\r\n                status: !state[index].status\r\n            }            \r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n            return [...state]\r\n            \r\n        case types.DELETE_TASK:\r\n            id = action.id\r\n            index = findIndex(state, id);\r\n            state.splice(index, 1)\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state]\r\n      \r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default myReducer","import * as types from './../constants/ActionTypes'\r\n\r\n\r\nvar initialState = false\r\n\r\nvar isDisplayForm = (state=initialState, action) =>{\r\n    switch(action.type){\r\n       case types.TOGGLE_FORM:\r\n           return !state\r\n        case types.OPEN_FORM:            \r\n            return true\r\n        case types.CLOSE_FORM:           \r\n            return false\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default isDisplayForm","import * as types from './../constants/ActionTypes'\r\n\r\n\r\nvar initialState = {\r\n    id: '',\r\n    name: '',\r\n    status: true\r\n}\r\n\r\nvar itemEditing = (state = initialState, action) =>{\r\n    switch(action.type){\r\n        case types.EDIT_TASK:\r\n            return action.task\r\n      \r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default itemEditing","import * as types from './../constants/ActionTypes'\r\n\r\n\r\nvar initialState = {\r\n    name: '',\r\n    status: -1\r\n}\r\n\r\nvar filterTable = (state = initialState, action) =>{\r\n    switch(action.type){\r\n        case types.FILTER_TABLE:\r\n            return {\r\n                name: action.filter.name,\r\n                status: parseInt( action.filter.status, 10)\r\n            }\r\n      \r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default filterTable","import * as types from './../constants/ActionTypes'\r\n\r\n\r\nvar initialState = ''\r\n\r\n\r\nvar search = (state = initialState, action) =>{\r\n    switch(action.type){\r\n        case types.SEARCH:\r\n            return action.keyword\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default search","import { combineReducers } from 'redux';\r\nimport tasks from './tasks'\r\nimport isDisplayForm from './isDisplayForm'\r\nimport itemEditing from './itemEditing'\r\nimport filterTable from './filterTable'\r\nimport search from './search'\r\n\r\nconst myReducer = combineReducers({\r\n    tasks, //tasks: tasks\r\n    isDisplayForm,\r\n    itemEditing,\r\n    filterTable,\r\n    search\r\n    \r\n})\r\n\r\nexport default myReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nimport myReducer from './reducers/index'\n\nimport { createStore } from 'redux'\n\nimport { Provider } from 'react-redux'\n\nconst store = createStore(myReducer)\n\nReactDOM.render(\n  <Provider store = { store }>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}